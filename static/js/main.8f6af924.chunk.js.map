{"version":3,"sources":["components/styles/Containers.js","components/SearchForm.js","components/CardItem.js","actions/Actions.js","components/CardList.js","App.js","reducers/Store.js","index.js"],"names":["SearchContainer","styled","div","ListContainer","SearchForm","props","Input","icon","placeholder","onKeyUp","event","onTextChange","target","value","connect","dispatch","deleteCharacter","url","type","character","name","height","gender","Card","Content","Image","alt","floated","size","src","Header","Meta","extra","Button","basic","color","onClick","CardList","noResultMessage","message","characters","searchText","length","Message","info","map","state","loading","getCharacters","fetch","then","response","json","data","results","catch","useState","setSearchText","charactersToShow","filter","toLowerCase","includes","useEffect","Dimmer","active","inverted","Loader","text","initialState","Immutable","store","createStore","action","merge","filterCharacters","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f6af924.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SearchContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const ListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: 15px;\r\n`;\r\n","import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {SearchContainer} from './styles/Containers'\r\n\r\nconst SearchForm = (props) => {\r\n    const handleChangeSearchText = (event) => props.onTextChange(event.target.value);\r\n\r\n    return (\r\n        <SearchContainer>\r\n            <Input icon='search' placeholder='Search...' onKeyUp={handleChangeSearchText} />\r\n        </SearchContainer>\r\n    );\r\n};\r\n\r\nSearchForm.propTypes = {\r\n    onTextChange: PropTypes.func,\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport { Card, Button, Image } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {deleteCharacter} from '../actions/Actions';\r\n\r\nconst CardItem = (props) => {\r\n    const {name, height, gender, url} = props.character;\r\n\r\n    const removeCharacter = () => props.deleteCharacter(url);\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Content>\r\n                <Image\r\n                    alt='Card image profile'\r\n                    floated='right'\r\n                    size='mini'\r\n                    src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\r\n                />\r\n                <Card.Header>{name}</Card.Header>\r\n                <Card.Meta>{height}</Card.Meta>\r\n                <Card.Meta>{gender}</Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button basic color='red' floated='right' onClick={removeCharacter}>\r\n                    Remove\r\n                </Button>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nCardItem.propTypes = {\r\n    character: PropTypes.object,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteCharacter: (url) => deleteCharacter(dispatch, url)\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CardItem);\r\n","const API = 'https://swapi.dev/api/people/';\r\n\r\nconst getCharacters = (dispatch) => {\r\n    dispatch({\r\n        type: 'START_GET_CHARACTERS'\r\n    });\r\n    fetch(API)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        dispatch({\r\n            type: 'SUCCESS_GET_CHARACTERS',\r\n            characters: data.results\r\n        });\r\n    })\r\n    .catch(() => {\r\n        dispatch({\r\n            type: 'ERROR_GET_CHARACTERS'\r\n        });\r\n    });\r\n};\r\n\r\nconst deleteCharacter = (dispatch, url) =>{\r\n    dispatch({\r\n        type: 'DELETE_CHARACTER',\r\n        url\r\n    })\r\n}\r\n\r\nexport  {\r\n    getCharacters,\r\n    deleteCharacter,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Message} from 'semantic-ui-react';\r\n\r\nimport CardItem from './CardItem';\r\nimport {ListContainer} from './styles/Containers';\r\n\r\nconst CardList = ({characters,searchText}) => {\r\n    let noResultMessage;\r\n    if (characters.length === 0) {\r\n        let message;\r\n        if (searchText === '') {\r\n            message = `There are no characters to show`;\r\n        } else {\r\n            message = `There are no characters that match the search \"${searchText}\"`;\r\n        }\r\n        noResultMessage = (\r\n            <Message info>\r\n                <Message.Header>{message}</Message.Header>\r\n            </Message>\r\n        );\r\n    }\r\n    return (\r\n        <ListContainer>\r\n           {\r\n                characters.map(character => {\r\n                    return <CardItem key={character.url} character={character}/>;\r\n                })\r\n            }\r\n            {noResultMessage}\r\n        </ListContainer>\r\n         \r\n    );\r\n};\r\n\r\nCardList.propTypes = {\r\n    characters: PropTypes.array,\r\n    searchText: PropTypes.string\r\n};\r\n\r\nexport default CardList\r\n","import React, { useState, useEffect } from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\n\nimport SearchForm from './components/SearchForm';\nimport {getCharacters} from './actions/Actions';\nimport CardList from './components/CardList';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst App = (props) => {\n    const [searchText, setSearchText] = useState('');\n    const handleChangeSearchText = (text) => setSearchText(text);\n\n    const charactersToShow = props.characters.filter(character => {\n        if (searchText === '') {\n            return character;\n        } else {\n            if (character.name.toLowerCase().includes(searchText)) {\n                return character;\n            }\n        }\n    });\n\n    useEffect(() => {\n            props.getCharacters();\n    }, []);\n\n    return (\n        <section>\n            <Dimmer active={props.loading} inverted>\n                <Loader size='large'>Loading...</Loader>\n            </Dimmer>\n            <SearchForm onTextChange={handleChangeSearchText}/>\n            <CardList characters={charactersToShow} searchText={searchText}/>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    characters: state.characters,\n    loading: state.loading\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getCharacters: () => getCharacters(dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {createStore} from 'redux';\r\nimport Immutable from 'seamless-immutable';\r\n\r\nconst initialState = Immutable({\r\n    loading: false,\r\n    characters: []\r\n});\r\n\r\nconst charactersStore = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SUCCESS_GET_CHARACTERS':\r\n            return state.merge({\r\n                characters: action.characters,\r\n                loading: false\r\n            });\r\n        case 'DELETE_CHARACTER':\r\n            let url = action.url;\r\n            const filterCharacters = state.characters.filter(character => character.url !== url);\r\n            return state.merge({\r\n                characters: filterCharacters\r\n            });\r\n        case 'START_GET_CHARACTERS':\r\n            return state.merge({\r\n                loading: true\r\n            });\r\n        case 'ERROR_GET_CHARACTERS':\r\n            return state.merge({\r\n                loading: false\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(charactersStore);\r\n\r\nexport default store;\r\n","import App from './App';\nimport {Provider} from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './reducers/Store';\n\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}